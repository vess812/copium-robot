name: Go Pipeline

on:
  push:
    branches: [ master, dev ]
  pull_request:
    branches: [ master, dev ]
  create:
    tags: [ 'v*' ]  # Trigger deploy on semantic version tags

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22'

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest

  test:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22'

      - name: Run tests
        run: go test -v -race ./...

  build-docker:
    runs-on: ubuntu-latest
    needs: test
    outputs:
      image_tag: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=tag
            type=sha

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy:
    runs-on: ubuntu-latest
    needs: build-docker
    if: ${{ github.event_name == 'create' }}
    env:
      REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
      REMOTE_USER: ${{ secrets.REMOTE_USER }}
      COMPOSE_PROJECT_NAME: my-go-app
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Setup Docker Compose on remote host
        env:
          IMAGE_FULL_NAME: ${{ needs.build-docker.outputs.image_tag }}
        run: |
          # Create remote directory structure
          ssh $REMOTE_USER@$REMOTE_HOST "mkdir -p $COMPOSE_PROJECT_NAME"
          
          # Copy compose file to remote host
          scp docker-compose.prod.yml $REMOTE_USER@$REMOTE_HOST:~/$COMPOSE_PROJECT_NAME/docker-compose.yml
          
          # Update compose file with new image
          ssh $REMOTE_USER@$REMOTE_HOST "sed -i 's|image:.*|image: $IMAGE_FULL_NAME|' ~/$COMPOSE_PROJECT_NAME/docker-compose.yml"

      - name: Deploy using Docker Compose
        run: |
          ssh $REMOTE_USER@$REMOTE_HOST "cd ~/$COMPOSE_PROJECT_NAME && docker-compose up -d"